// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Holds bindings to UnQLite.
class UnQLiteBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UnQLiteBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UnQLiteBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  int unqlite_open(
    ffi.Pointer<ffi.Pointer<unqlite>> ppDB,
    ffi.Pointer<ffi.Char> zFilename,
    int iMode,
  ) {
    return _unqlite_open(
      ppDB,
      zFilename,
      iMode,
    );
  }

  late final _unqlite_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<unqlite>>,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('unqlite_open');
  late final _unqlite_open = _unqlite_openPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<unqlite>>, ffi.Pointer<ffi.Char>, int)>();

  int unqlite_config(ffi.Pointer<unqlite> pDb, int nOp,
      ffi.Pointer<ffi.Pointer<ffi.Uint8>> ppBuf, ffi.Pointer<ffi.Int32> size) {
    return _unqlite_config(
      pDb,
      nOp,
    );
  }

  late final _unqlite_configPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>, ffi.Int)>>(
      'unqlite_config');
  late final _unqlite_config =
      _unqlite_configPtr.asFunction<int Function(ffi.Pointer<unqlite>, int)>();

  int unqlite_close(
    ffi.Pointer<unqlite> pDb,
  ) {
    return _unqlite_close(
      pDb,
    );
  }

  late final _unqlite_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>)>>(
          'unqlite_close');
  late final _unqlite_close =
      _unqlite_closePtr.asFunction<int Function(ffi.Pointer<unqlite>)>();

  int unqlite_kv_store(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<ffi.Void> pData,
    int nDataLen,
  ) {
    return _unqlite_kv_store(
      pDb,
      pKey,
      nKeyLen,
      pData,
      nDataLen,
    );
  }

  late final _unqlite_kv_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, unqlite_int64)>>('unqlite_kv_store');
  late final _unqlite_kv_store = _unqlite_kv_storePtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  int unqlite_kv_append(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<ffi.Void> pData,
    int nDataLen,
  ) {
    return _unqlite_kv_append(
      pDb,
      pKey,
      nKeyLen,
      pData,
      nDataLen,
    );
  }

  late final _unqlite_kv_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Void>, unqlite_int64)>>('unqlite_kv_append');
  late final _unqlite_kv_append = _unqlite_kv_appendPtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  int unqlite_kv_store_fmt(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<ffi.Char> zFormat,
  ) {
    return _unqlite_kv_store_fmt(
      pDb,
      pKey,
      nKeyLen,
      zFormat,
    );
  }

  late final _unqlite_kv_store_fmtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('unqlite_kv_store_fmt');
  late final _unqlite_kv_store_fmt = _unqlite_kv_store_fmtPtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Char>)>();

  int unqlite_kv_append_fmt(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<ffi.Char> zFormat,
  ) {
    return _unqlite_kv_append_fmt(
      pDb,
      pKey,
      nKeyLen,
      zFormat,
    );
  }

  late final _unqlite_kv_append_fmtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('unqlite_kv_append_fmt');
  late final _unqlite_kv_append_fmt = _unqlite_kv_append_fmtPtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Char>)>();

  int unqlite_kv_fetch(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<ffi.Void> pBuf,
    ffi.Pointer<unqlite_int64> pBufLen,
  ) {
    return _unqlite_kv_fetch(
      pDb,
      pKey,
      nKeyLen,
      pBuf,
      pBufLen,
    );
  }

  late final _unqlite_kv_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<unqlite_int64>)>>('unqlite_kv_fetch');
  late final _unqlite_kv_fetch = _unqlite_kv_fetchPtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<unqlite_int64>)>();

  int unqlite_kv_fetch_callback(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                    ffi.Pointer<ffi.Void>)>>
        xConsumer,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_kv_fetch_callback(
      pDb,
      pKey,
      nKeyLen,
      xConsumer,
      pUserData,
    );
  }

  late final _unqlite_kv_fetch_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('unqlite_kv_fetch_callback');
  late final _unqlite_kv_fetch_callback =
      _unqlite_kv_fetch_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<unqlite>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int unqlite_kv_delete(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
  ) {
    return _unqlite_kv_delete(
      pDb,
      pKey,
      nKeyLen,
    );
  }

  late final _unqlite_kv_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('unqlite_kv_delete');
  late final _unqlite_kv_delete = _unqlite_kv_deletePtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Void>, int)>();

  int unqlite_kv_config(
    ffi.Pointer<unqlite> pDb,
    int iOp,
  ) {
    return _unqlite_kv_config(
      pDb,
      iOp,
    );
  }

  late final _unqlite_kv_configPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>, ffi.Int)>>(
      'unqlite_kv_config');
  late final _unqlite_kv_config = _unqlite_kv_configPtr
      .asFunction<int Function(ffi.Pointer<unqlite>, int)>();

  int unqlite_compile(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Char> zJx9,
    int nByte,
    ffi.Pointer<ffi.Pointer<unqlite_vm>> ppOut,
  ) {
    return _unqlite_compile(
      pDb,
      zJx9,
      nByte,
      ppOut,
    );
  }

  late final _unqlite_compilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Pointer<unqlite_vm>>)>>('unqlite_compile');
  late final _unqlite_compile = _unqlite_compilePtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<unqlite_vm>>)>();

  int unqlite_compile_file(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Char> zPath,
    ffi.Pointer<ffi.Pointer<unqlite_vm>> ppOut,
  ) {
    return _unqlite_compile_file(
      pDb,
      zPath,
      ppOut,
    );
  }

  late final _unqlite_compile_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<unqlite_vm>>)>>('unqlite_compile_file');
  late final _unqlite_compile_file = _unqlite_compile_filePtr.asFunction<
      int Function(ffi.Pointer<unqlite>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<unqlite_vm>>)>();

  int unqlite_vm_config(ffi.Pointer<unqlite_vm> pVm, int iOp,
      ffi.Pointer<ffi.Char> nP, ffi.Pointer<unqlite_value> vP) {
    return _unqlite_vm_config(
      pVm,
      iOp,
      nP,
      vP,
    );
  }

  late final _unqlite_vm_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_vm>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<unqlite_value>)>>('unqlite_vm_config');
  late final _unqlite_vm_config = _unqlite_vm_configPtr.asFunction<
      int Function(ffi.Pointer<unqlite_vm>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<unqlite_value>)>();

  int unqlite_vm_exec(
    ffi.Pointer<unqlite_vm> pVm,
  ) {
    return _unqlite_vm_exec(
      pVm,
    );
  }

  late final _unqlite_vm_execPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_vm>)>>(
          'unqlite_vm_exec');
  late final _unqlite_vm_exec =
      _unqlite_vm_execPtr.asFunction<int Function(ffi.Pointer<unqlite_vm>)>();

  int unqlite_vm_reset(
    ffi.Pointer<unqlite_vm> pVm,
  ) {
    return _unqlite_vm_reset(
      pVm,
    );
  }

  late final _unqlite_vm_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_vm>)>>(
          'unqlite_vm_reset');
  late final _unqlite_vm_reset =
      _unqlite_vm_resetPtr.asFunction<int Function(ffi.Pointer<unqlite_vm>)>();

  int unqlite_vm_release(
    ffi.Pointer<unqlite_vm> pVm,
  ) {
    return _unqlite_vm_release(
      pVm,
    );
  }

  late final _unqlite_vm_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_vm>)>>(
          'unqlite_vm_release');
  late final _unqlite_vm_release = _unqlite_vm_releasePtr
      .asFunction<int Function(ffi.Pointer<unqlite_vm>)>();

  int unqlite_vm_dump(
    ffi.Pointer<unqlite_vm> pVm,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                    ffi.Pointer<ffi.Void>)>>
        xConsumer,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_vm_dump(
      pVm,
      xConsumer,
      pUserData,
    );
  }

  late final _unqlite_vm_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_vm>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('unqlite_vm_dump');
  late final _unqlite_vm_dump = _unqlite_vm_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<unqlite_vm>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                      ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<unqlite_value> unqlite_vm_extract_variable(
    ffi.Pointer<unqlite_vm> pVm,
    ffi.Pointer<ffi.Char> zVarname,
  ) {
    return _unqlite_vm_extract_variable(
      pVm,
      zVarname,
    );
  }

  late final _unqlite_vm_extract_variablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_vm>,
              ffi.Pointer<ffi.Char>)>>('unqlite_vm_extract_variable');
  late final _unqlite_vm_extract_variable =
      _unqlite_vm_extract_variablePtr.asFunction<
          ffi.Pointer<unqlite_value> Function(
              ffi.Pointer<unqlite_vm>, ffi.Pointer<ffi.Char>)>();

  int unqlite_kv_cursor_init(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<ffi.Pointer<unqlite_kv_cursor>> ppOut,
  ) {
    return _unqlite_kv_cursor_init(
      pDb,
      ppOut,
    );
  }

  late final _unqlite_kv_cursor_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<unqlite>,
                  ffi.Pointer<ffi.Pointer<unqlite_kv_cursor>>)>>(
      'unqlite_kv_cursor_init');
  late final _unqlite_kv_cursor_init = _unqlite_kv_cursor_initPtr.asFunction<
      int Function(
          ffi.Pointer<unqlite>, ffi.Pointer<ffi.Pointer<unqlite_kv_cursor>>)>();

  int unqlite_kv_cursor_release(
    ffi.Pointer<unqlite> pDb,
    ffi.Pointer<unqlite_kv_cursor> pCur,
  ) {
    return _unqlite_kv_cursor_release(
      pDb,
      pCur,
    );
  }

  late final _unqlite_kv_cursor_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite>,
              ffi.Pointer<unqlite_kv_cursor>)>>('unqlite_kv_cursor_release');
  late final _unqlite_kv_cursor_release =
      _unqlite_kv_cursor_releasePtr.asFunction<
          int Function(ffi.Pointer<unqlite>, ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_seek(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
    ffi.Pointer<ffi.Void> pKey,
    int nKeyLen,
    int iPos,
  ) {
    return _unqlite_kv_cursor_seek(
      pCursor,
      pKey,
      nKeyLen,
      iPos,
    );
  }

  late final _unqlite_kv_cursor_seekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int)>>('unqlite_kv_cursor_seek');
  late final _unqlite_kv_cursor_seek = _unqlite_kv_cursor_seekPtr.asFunction<
      int Function(
          ffi.Pointer<unqlite_kv_cursor>, ffi.Pointer<ffi.Void>, int, int)>();

  int unqlite_kv_cursor_first_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_first_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_first_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_first_entry');
  late final _unqlite_kv_cursor_first_entry = _unqlite_kv_cursor_first_entryPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_last_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_last_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_last_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_last_entry');
  late final _unqlite_kv_cursor_last_entry = _unqlite_kv_cursor_last_entryPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_valid_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_valid_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_valid_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_valid_entry');
  late final _unqlite_kv_cursor_valid_entry = _unqlite_kv_cursor_valid_entryPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_next_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_next_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_next_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_next_entry');
  late final _unqlite_kv_cursor_next_entry = _unqlite_kv_cursor_next_entryPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_prev_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_prev_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_prev_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_prev_entry');
  late final _unqlite_kv_cursor_prev_entry = _unqlite_kv_cursor_prev_entryPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_key(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
    ffi.Pointer<ffi.Void> pBuf,
    ffi.Pointer<ffi.Int> pnByte,
  ) {
    return _unqlite_kv_cursor_key(
      pCursor,
      pBuf,
      pnByte,
    );
  }

  late final _unqlite_kv_cursor_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('unqlite_kv_cursor_key');
  late final _unqlite_kv_cursor_key = _unqlite_kv_cursor_keyPtr.asFunction<
      int Function(ffi.Pointer<unqlite_kv_cursor>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int>)>();

  int unqlite_kv_cursor_key_callback(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                    ffi.Pointer<ffi.Void>)>>
        xConsumer,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_kv_cursor_key_callback(
      pCursor,
      xConsumer,
      pUserData,
    );
  }

  late final _unqlite_kv_cursor_key_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('unqlite_kv_cursor_key_callback');
  late final _unqlite_kv_cursor_key_callback =
      _unqlite_kv_cursor_key_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int unqlite_kv_cursor_data(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
    ffi.Pointer<ffi.Void> pBuf,
    ffi.Pointer<unqlite_int64> pnData,
  ) {
    return _unqlite_kv_cursor_data(
      pCursor,
      pBuf,
      pnData,
    );
  }

  late final _unqlite_kv_cursor_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<unqlite_int64>)>>('unqlite_kv_cursor_data');
  late final _unqlite_kv_cursor_data = _unqlite_kv_cursor_dataPtr.asFunction<
      int Function(ffi.Pointer<unqlite_kv_cursor>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<unqlite_int64>)>();

  int unqlite_kv_cursor_data_callback(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                    ffi.Pointer<ffi.Void>)>>
        xConsumer,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_kv_cursor_data_callback(
      pCursor,
      xConsumer,
      pUserData,
    );
  }

  late final _unqlite_kv_cursor_data_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('unqlite_kv_cursor_data_callback');
  late final _unqlite_kv_cursor_data_callback =
      _unqlite_kv_cursor_data_callbackPtr.asFunction<
          int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>();

  int unqlite_kv_cursor_delete_entry(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_delete_entry(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_delete_entryPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_delete_entry');
  late final _unqlite_kv_cursor_delete_entry =
      _unqlite_kv_cursor_delete_entryPtr
          .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_kv_cursor_reset(
    ffi.Pointer<unqlite_kv_cursor> pCursor,
  ) {
    return _unqlite_kv_cursor_reset(
      pCursor,
    );
  }

  late final _unqlite_kv_cursor_resetPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>(
      'unqlite_kv_cursor_reset');
  late final _unqlite_kv_cursor_reset = _unqlite_kv_cursor_resetPtr
      .asFunction<int Function(ffi.Pointer<unqlite_kv_cursor>)>();

  int unqlite_begin(
    ffi.Pointer<unqlite> pDb,
  ) {
    return _unqlite_begin(
      pDb,
    );
  }

  late final _unqlite_beginPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>)>>(
          'unqlite_begin');
  late final _unqlite_begin =
      _unqlite_beginPtr.asFunction<int Function(ffi.Pointer<unqlite>)>();

  int unqlite_commit(
    ffi.Pointer<unqlite> pDb,
  ) {
    return _unqlite_commit(
      pDb,
    );
  }

  late final _unqlite_commitPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>)>>(
          'unqlite_commit');
  late final _unqlite_commit =
      _unqlite_commitPtr.asFunction<int Function(ffi.Pointer<unqlite>)>();

  int unqlite_rollback(
    ffi.Pointer<unqlite> pDb,
  ) {
    return _unqlite_rollback(
      pDb,
    );
  }

  late final _unqlite_rollbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite>)>>(
          'unqlite_rollback');
  late final _unqlite_rollback =
      _unqlite_rollbackPtr.asFunction<int Function(ffi.Pointer<unqlite>)>();

  ffi.Pointer<unqlite_value> unqlite_vm_new_scalar(
    ffi.Pointer<unqlite_vm> pVm,
  ) {
    return _unqlite_vm_new_scalar(
      pVm,
    );
  }

  late final _unqlite_vm_new_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(
              ffi.Pointer<unqlite_vm>)>>('unqlite_vm_new_scalar');
  late final _unqlite_vm_new_scalar = _unqlite_vm_new_scalarPtr.asFunction<
      ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_vm>)>();

  ffi.Pointer<unqlite_value> unqlite_vm_new_array(
    ffi.Pointer<unqlite_vm> pVm,
  ) {
    return _unqlite_vm_new_array(
      pVm,
    );
  }

  late final _unqlite_vm_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(
              ffi.Pointer<unqlite_vm>)>>('unqlite_vm_new_array');
  late final _unqlite_vm_new_array = _unqlite_vm_new_arrayPtr.asFunction<
      ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_vm>)>();

  int unqlite_vm_release_value(
    ffi.Pointer<unqlite_vm> pVm,
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_vm_release_value(
      pVm,
      pValue,
    );
  }

  late final _unqlite_vm_release_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_vm>,
              ffi.Pointer<unqlite_value>)>>('unqlite_vm_release_value');
  late final _unqlite_vm_release_value =
      _unqlite_vm_release_valuePtr.asFunction<
          int Function(ffi.Pointer<unqlite_vm>, ffi.Pointer<unqlite_value>)>();

  ffi.Pointer<unqlite_value> unqlite_context_new_scalar(
    ffi.Pointer<unqlite_context> pCtx,
  ) {
    return _unqlite_context_new_scalar(
      pCtx,
    );
  }

  late final _unqlite_context_new_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(
              ffi.Pointer<unqlite_context>)>>('unqlite_context_new_scalar');
  late final _unqlite_context_new_scalar =
      _unqlite_context_new_scalarPtr.asFunction<
          ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_context>)>();

  ffi.Pointer<unqlite_value> unqlite_context_new_array(
    ffi.Pointer<unqlite_context> pCtx,
  ) {
    return _unqlite_context_new_array(
      pCtx,
    );
  }

  late final _unqlite_context_new_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(
              ffi.Pointer<unqlite_context>)>>('unqlite_context_new_array');
  late final _unqlite_context_new_array =
      _unqlite_context_new_arrayPtr.asFunction<
          ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_context>)>();

  void unqlite_context_release_value(
    ffi.Pointer<unqlite_context> pCtx,
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_context_release_value(
      pCtx,
      pValue,
    );
  }

  late final _unqlite_context_release_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<unqlite_context>,
              ffi.Pointer<unqlite_value>)>>('unqlite_context_release_value');
  late final _unqlite_context_release_value =
      _unqlite_context_release_valuePtr.asFunction<
          void Function(
              ffi.Pointer<unqlite_context>, ffi.Pointer<unqlite_value>)>();

  int unqlite_value_int(
    ffi.Pointer<unqlite_value> pVal,
    int iValue,
  ) {
    return _unqlite_value_int(
      pVal,
      iValue,
    );
  }

  late final _unqlite_value_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_value>, ffi.Int)>>('unqlite_value_int');
  late final _unqlite_value_int = _unqlite_value_intPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>, int)>();

  int unqlite_value_int64(
    ffi.Pointer<unqlite_value> pVal,
    int iValue,
  ) {
    return _unqlite_value_int64(
      pVal,
      iValue,
    );
  }

  late final _unqlite_value_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_value>,
              unqlite_int64)>>('unqlite_value_int64');
  late final _unqlite_value_int64 = _unqlite_value_int64Ptr
      .asFunction<int Function(ffi.Pointer<unqlite_value>, int)>();

  int unqlite_value_bool(
    ffi.Pointer<unqlite_value> pVal,
    int iBool,
  ) {
    return _unqlite_value_bool(
      pVal,
      iBool,
    );
  }

  late final _unqlite_value_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_value>, ffi.Int)>>('unqlite_value_bool');
  late final _unqlite_value_bool = _unqlite_value_boolPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>, int)>();

  int unqlite_value_null(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_null(
      pVal,
    );
  }

  late final _unqlite_value_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_null');
  late final _unqlite_value_null = _unqlite_value_nullPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_double(
    ffi.Pointer<unqlite_value> pVal,
    double Value,
  ) {
    return _unqlite_value_double(
      pVal,
      Value,
    );
  }

  late final _unqlite_value_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_value>, ffi.Double)>>('unqlite_value_double');
  late final _unqlite_value_double = _unqlite_value_doublePtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>, double)>();

  int unqlite_value_string(
    ffi.Pointer<unqlite_value> pVal,
    ffi.Pointer<ffi.Char> zString,
    int nLen,
  ) {
    return _unqlite_value_string(
      pVal,
      zString,
      nLen,
    );
  }

  late final _unqlite_value_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('unqlite_value_string');
  late final _unqlite_value_string = _unqlite_value_stringPtr.asFunction<
      int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>, int)>();

  int unqlite_value_string_format(
    ffi.Pointer<unqlite_value> pVal,
    ffi.Pointer<ffi.Char> zFormat,
  ) {
    return _unqlite_value_string_format(
      pVal,
      zFormat,
    );
  }

  late final _unqlite_value_string_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_value>,
              ffi.Pointer<ffi.Char>)>>('unqlite_value_string_format');
  late final _unqlite_value_string_format =
      _unqlite_value_string_formatPtr.asFunction<
          int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>)>();

  int unqlite_value_reset_string_cursor(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_reset_string_cursor(
      pVal,
    );
  }

  late final _unqlite_value_reset_string_cursorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_reset_string_cursor');
  late final _unqlite_value_reset_string_cursor =
      _unqlite_value_reset_string_cursorPtr
          .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_resource(
    ffi.Pointer<unqlite_value> pVal,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_value_resource(
      pVal,
      pUserData,
    );
  }

  late final _unqlite_value_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_value>,
              ffi.Pointer<ffi.Void>)>>('unqlite_value_resource');
  late final _unqlite_value_resource = _unqlite_value_resourcePtr.asFunction<
      int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Void>)>();

  int unqlite_value_release(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_release(
      pVal,
    );
  }

  late final _unqlite_value_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_release');
  late final _unqlite_value_release = _unqlite_value_releasePtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_to_int(
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_value_to_int(
      pValue,
    );
  }

  late final _unqlite_value_to_intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_to_int');
  late final _unqlite_value_to_int = _unqlite_value_to_intPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_to_bool(
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_value_to_bool(
      pValue,
    );
  }

  late final _unqlite_value_to_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_to_bool');
  late final _unqlite_value_to_bool = _unqlite_value_to_boolPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_to_int64(
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_value_to_int64(
      pValue,
    );
  }

  late final _unqlite_value_to_int64Ptr = _lookup<
      ffi.NativeFunction<
          unqlite_int64 Function(
              ffi.Pointer<unqlite_value>)>>('unqlite_value_to_int64');
  late final _unqlite_value_to_int64 = _unqlite_value_to_int64Ptr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  double unqlite_value_to_double(
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_value_to_double(
      pValue,
    );
  }

  late final _unqlite_value_to_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<unqlite_value>)>>(
      'unqlite_value_to_double');
  late final _unqlite_value_to_double = _unqlite_value_to_doublePtr
      .asFunction<double Function(ffi.Pointer<unqlite_value>)>();

  ffi.Pointer<ffi.Char> unqlite_value_to_string(
    ffi.Pointer<unqlite_value> pValue,
    ffi.Pointer<ffi.Int> pLen,
  ) {
    return _unqlite_value_to_string(
      pValue,
      pLen,
    );
  }

  late final _unqlite_value_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<unqlite_value>,
              ffi.Pointer<ffi.Int>)>>('unqlite_value_to_string');
  late final _unqlite_value_to_string = _unqlite_value_to_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Void> unqlite_value_to_resource(
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_value_to_resource(
      pValue,
    );
  }

  late final _unqlite_value_to_resourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<unqlite_value>)>>('unqlite_value_to_resource');
  late final _unqlite_value_to_resource = _unqlite_value_to_resourcePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_int(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_int(
      pVal,
    );
  }

  late final _unqlite_value_is_intPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_int');
  late final _unqlite_value_is_int = _unqlite_value_is_intPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_float(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_float(
      pVal,
    );
  }

  late final _unqlite_value_is_floatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_float');
  late final _unqlite_value_is_float = _unqlite_value_is_floatPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_bool(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_bool(
      pVal,
    );
  }

  late final _unqlite_value_is_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_bool');
  late final _unqlite_value_is_bool = _unqlite_value_is_boolPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_string(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_string(
      pVal,
    );
  }

  late final _unqlite_value_is_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_string');
  late final _unqlite_value_is_string = _unqlite_value_is_stringPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_null(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_null(
      pVal,
    );
  }

  late final _unqlite_value_is_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_null');
  late final _unqlite_value_is_null = _unqlite_value_is_nullPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_numeric(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_numeric(
      pVal,
    );
  }

  late final _unqlite_value_is_numericPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_numeric');
  late final _unqlite_value_is_numeric = _unqlite_value_is_numericPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_callable(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_callable(
      pVal,
    );
  }

  late final _unqlite_value_is_callablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_callable');
  late final _unqlite_value_is_callable = _unqlite_value_is_callablePtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_scalar(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_scalar(
      pVal,
    );
  }

  late final _unqlite_value_is_scalarPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_scalar');
  late final _unqlite_value_is_scalar = _unqlite_value_is_scalarPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_json_array(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_json_array(
      pVal,
    );
  }

  late final _unqlite_value_is_json_arrayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_json_array');
  late final _unqlite_value_is_json_array = _unqlite_value_is_json_arrayPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_json_object(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_json_object(
      pVal,
    );
  }

  late final _unqlite_value_is_json_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_json_object');
  late final _unqlite_value_is_json_object = _unqlite_value_is_json_objectPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_resource(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_resource(
      pVal,
    );
  }

  late final _unqlite_value_is_resourcePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_resource');
  late final _unqlite_value_is_resource = _unqlite_value_is_resourcePtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_value_is_empty(
    ffi.Pointer<unqlite_value> pVal,
  ) {
    return _unqlite_value_is_empty(
      pVal,
    );
  }

  late final _unqlite_value_is_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_value_is_empty');
  late final _unqlite_value_is_empty = _unqlite_value_is_emptyPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  ffi.Pointer<unqlite_value> unqlite_array_fetch(
    ffi.Pointer<unqlite_value> pArray,
    ffi.Pointer<ffi.Char> zKey,
    int nByte,
  ) {
    return _unqlite_array_fetch(
      pArray,
      zKey,
      nByte,
    );
  }

  late final _unqlite_array_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<unqlite_value> Function(ffi.Pointer<unqlite_value>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('unqlite_array_fetch');
  late final _unqlite_array_fetch = _unqlite_array_fetchPtr.asFunction<
      ffi.Pointer<unqlite_value> Function(
          ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>, int)>();

  int unqlite_array_walk(
    ffi.Pointer<unqlite_value> pArray,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<unqlite_value>,
                    ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Void>)>>
        xWalk,
    ffi.Pointer<ffi.Void> pUserData,
  ) {
    return _unqlite_array_walk(
      pArray,
      xWalk,
      pUserData,
    );
  }

  late final _unqlite_array_walkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_value>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<unqlite_value>,
                          ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('unqlite_array_walk');
  late final _unqlite_array_walk = _unqlite_array_walkPtr.asFunction<
      int Function(
          ffi.Pointer<unqlite_value>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(ffi.Pointer<unqlite_value>,
                      ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int unqlite_array_add_elem(
    ffi.Pointer<unqlite_value> pArray,
    ffi.Pointer<unqlite_value> pKey,
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_array_add_elem(
      pArray,
      pKey,
      pValue,
    );
  }

  late final _unqlite_array_add_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_value>,
              ffi.Pointer<unqlite_value>,
              ffi.Pointer<unqlite_value>)>>('unqlite_array_add_elem');
  late final _unqlite_array_add_elem = _unqlite_array_add_elemPtr.asFunction<
      int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<unqlite_value>,
          ffi.Pointer<unqlite_value>)>();

  int unqlite_array_add_strkey_elem(
    ffi.Pointer<unqlite_value> pArray,
    ffi.Pointer<ffi.Char> zKey,
    ffi.Pointer<unqlite_value> pValue,
  ) {
    return _unqlite_array_add_strkey_elem(
      pArray,
      zKey,
      pValue,
    );
  }

  late final _unqlite_array_add_strkey_elemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<unqlite_value>)>>('unqlite_array_add_strkey_elem');
  late final _unqlite_array_add_strkey_elem =
      _unqlite_array_add_strkey_elemPtr.asFunction<
          int Function(ffi.Pointer<unqlite_value>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<unqlite_value>)>();

  int unqlite_array_count(
    ffi.Pointer<unqlite_value> pArray,
  ) {
    return _unqlite_array_count(
      pArray,
    );
  }

  late final _unqlite_array_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_value>)>>(
          'unqlite_array_count');
  late final _unqlite_array_count = _unqlite_array_countPtr
      .asFunction<int Function(ffi.Pointer<unqlite_value>)>();

  int unqlite_lib_config(
    int nConfigOp,
  ) {
    return _unqlite_lib_config(
      nConfigOp,
    );
  }

  late final _unqlite_lib_configPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'unqlite_lib_config');
  late final _unqlite_lib_config =
      _unqlite_lib_configPtr.asFunction<int Function(int)>();

  int unqlite_lib_init() {
    return _unqlite_lib_init();
  }

  late final _unqlite_lib_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('unqlite_lib_init');
  late final _unqlite_lib_init =
      _unqlite_lib_initPtr.asFunction<int Function()>();

  int unqlite_lib_shutdown() {
    return _unqlite_lib_shutdown();
  }

  late final _unqlite_lib_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('unqlite_lib_shutdown');
  late final _unqlite_lib_shutdown =
      _unqlite_lib_shutdownPtr.asFunction<int Function()>();

  int unqlite_lib_is_threadsafe() {
    return _unqlite_lib_is_threadsafe();
  }

  late final _unqlite_lib_is_threadsafePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'unqlite_lib_is_threadsafe');
  late final _unqlite_lib_is_threadsafe =
      _unqlite_lib_is_threadsafePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> unqlite_lib_version() {
    return _unqlite_lib_version();
  }

  late final _unqlite_lib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'unqlite_lib_version');
  late final _unqlite_lib_version =
      _unqlite_lib_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> unqlite_lib_signature() {
    return _unqlite_lib_signature();
  }

  late final _unqlite_lib_signaturePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'unqlite_lib_signature');
  late final _unqlite_lib_signature =
      _unqlite_lib_signaturePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> unqlite_lib_ident() {
    return _unqlite_lib_ident();
  }

  late final _unqlite_lib_identPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'unqlite_lib_ident');
  late final _unqlite_lib_ident =
      _unqlite_lib_identPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> unqlite_lib_copyright() {
    return _unqlite_lib_copyright();
  }

  late final _unqlite_lib_copyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'unqlite_lib_copyright');
  late final _unqlite_lib_copyright =
      _unqlite_lib_copyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();
}

typedef uintptr_t = ffi.UnsignedLongLong;

class unqlite_io_methods extends ffi.Struct {
  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_file>)>> xClose;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_file>, ffi.Pointer<ffi.Void>,
              unqlite_int64, unqlite_int64)>> xRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_file>, ffi.Pointer<ffi.Void>,
              unqlite_int64, unqlite_int64)>> xWrite;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<unqlite_file>, unqlite_int64)>>
      xTruncate;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_file>, ffi.Int)>> xSync;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_file>, ffi.Pointer<unqlite_int64>)>>
      xFileSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_file>, ffi.Int)>> xLock;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_file>, ffi.Int)>> xUnlock;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_file>, ffi.Pointer<ffi.Int>)>>
      xCheckReservedLock;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_file>)>>
      xSectorSize;
}

class unqlite_file extends ffi.Struct {
  external ffi.Pointer<unqlite_io_methods> pMethods;
}

typedef unqlite_int64 = sxi64;
typedef sxi64 = ffi.LongLong;

class unqlite_kv_methods extends ffi.Struct {
  external ffi.Pointer<ffi.Char> zName;

  @ffi.Int()
  external int szKv;

  @ffi.Int()
  external int szCursor;

  @ffi.Int()
  external int iVersion;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_kv_engine>, ffi.Int)>> xInit;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<unqlite_kv_engine>)>>
      xRelease;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_engine>, ffi.Int, va_list)>> xConfig;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_kv_engine>, pgno)>> xOpen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_engine>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              unqlite_int64)>> xReplace;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_engine>,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              unqlite_int64)>> xAppend;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xCursorInit;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int)>> xSeek;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xFirst;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xLast;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xValid;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xNext;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xPrev;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xDelete;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_kv_cursor>, ffi.Pointer<ffi.Int>)>>
      xKeyLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>> xKey;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_kv_cursor>, ffi.Pointer<unqlite_int64>)>>
      xDataLength;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<unqlite_kv_cursor>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.UnsignedInt,
                          ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>> xData;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xReset;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<unqlite_kv_cursor>)>>
      xCursorRelease;
}

class unqlite_kv_engine extends ffi.Struct {
  external ffi.Pointer<unqlite_kv_io> pIo;
}

class unqlite_kv_io extends ffi.Struct {
  external unqlite_kv_handle pHandle;

  external ffi.Pointer<unqlite_kv_methods> pMethods;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(unqlite_kv_handle, pgno,
              ffi.Pointer<ffi.Pointer<unqlite_page>>)>> xGet;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(unqlite_kv_handle, pgno,
              ffi.Pointer<ffi.Pointer<unqlite_page>>)>> xLookup;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              unqlite_kv_handle, ffi.Pointer<ffi.Pointer<unqlite_page>>)>> xNew;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>> xWrite;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>>
      xDontWrite;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>>
      xDontJournal;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>>
      xDontMkHot;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>> xPageRef;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<unqlite_page>)>>
      xPageUnref;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(unqlite_kv_handle)>>
      xPageSize;

  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function(unqlite_kv_handle)>>
      xReadOnly;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(unqlite_kv_handle)>> xTmpPage;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              unqlite_kv_handle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>> xSetUnpin;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              unqlite_kv_handle,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>> xSetReload;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(unqlite_kv_handle, ffi.Pointer<ffi.Char>)>> xErr;
}

typedef unqlite_kv_handle = ffi.Pointer<ffi.Void>;
typedef pgno = sxu64;
typedef sxu64 = ffi.UnsignedLongLong;

class unqlite_page extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedChar> zData;

  external ffi.Pointer<ffi.Void> pUserData;

  @sxu64()
  external int pgno;
}

typedef va_list = ffi.Pointer<ffi.Char>;

class unqlite_kv_cursor extends ffi.Struct {
  external ffi.Pointer<unqlite_kv_engine> pStore;
}

class jx9_io_stream extends ffi.Opaque {}

class jx9_context extends ffi.Opaque {}

class jx9_value extends ffi.Opaque {}

class unqlite_vfs extends ffi.Struct {
  external ffi.Pointer<ffi.Char> zName;

  @ffi.Int()
  external int iVersion;

  @ffi.Int()
  external int szOsFile;

  @ffi.Int()
  external int mxPathname;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<unqlite_file>, ffi.UnsignedInt)>> xOpen;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_vfs>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      xDelete;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Int>)>> xAccess;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_vfs>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Pointer<ffi.Char>)>> xFullPathname;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_vfs>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      xTmpDir;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<unqlite_vfs>, ffi.Int)>> xSleep;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<unqlite_vfs>, ffi.Pointer<Sytm>)>>
      xCurrentTime;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<unqlite_vfs>, ffi.Int, ffi.Pointer<ffi.Char>)>>
      xGetLastError;
}

class Sytm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  external ffi.Pointer<ffi.Char> tm_zone;

  @ffi.Long()
  external int tm_gmtoff;
}

class unqlite_vm extends ffi.Opaque {}

class unqlite extends ffi.Opaque {}

class SyMutexMethods extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> xGlobalInit;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> xGlobalRelease;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Pointer<SyMutex> Function(ffi.Int)>> xNew;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SyMutex>)>>
      xRelease;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SyMutex>)>>
      xEnter;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SyMutex>)>>
      xTryEnter;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SyMutex>)>>
      xLeave;
}

class SyMutex extends ffi.Opaque {}

class SyMemMethods extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.UnsignedInt)>>
      xAlloc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>> xRealloc;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xFree;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>)>>
      xChunkSize;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      xInit;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      xRelease;

  external ffi.Pointer<ffi.Void> pUserData;
}

class SyString extends ffi.Struct {
  external ffi.Pointer<ffi.Char> zString;

  @ffi.UnsignedInt()
  external int nByte;
}

class syiovec extends ffi.Struct {
  @ffi.UnsignedLong()
  external int nLen;

  external ffi.Pointer<ffi.Char> pBase;
}

typedef unqlite_value = jx9_value;
typedef unqlite_context = jx9_context;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const String UNQLITE_VERSION = '1.1.9';

const int UNQLITE_VERSION_NUMBER = 1001009;

const String UNQLITE_SIG = 'unqlite/1.1.9';

const String UNQLITE_IDENT = 'unqlite:29c173b1-ac2c-4b49-93ba-e600619e304e';

const String UNQLITE_COPYRIGHT =
    'Copyright (C) Symisc Systems, S.U.A.R.L [Mrad Chems Eddine <chm@symisc.net>] 2012-2019, http://unqlite.org/';

const int SXRET_OK = 0;

const int SXERR_MEM = -1;

const int SXERR_IO = -2;

const int SXERR_EMPTY = -3;

const int SXERR_LOCKED = -4;

const int SXERR_ORANGE = -5;

const int SXERR_NOTFOUND = -6;

const int SXERR_LIMIT = -7;

const int SXERR_MORE = -8;

const int SXERR_INVALID = -9;

const int SXERR_ABORT = -10;

const int SXERR_EXISTS = -11;

const int SXERR_SYNTAX = -12;

const int SXERR_UNKNOWN = -13;

const int SXERR_BUSY = -14;

const int SXERR_OVERFLOW = -15;

const int SXERR_WILLBLOCK = -16;

const int SXERR_NOTIMPLEMENTED = -17;

const int SXERR_EOF = -18;

const int SXERR_PERM = -19;

const int SXERR_NOOP = -20;

const int SXERR_FORMAT = -21;

const int SXERR_NEXT = -22;

const int SXERR_OS = -23;

const int SXERR_CORRUPT = -24;

const int SXERR_CONTINUE = -25;

const int SXERR_NOMATCH = -26;

const int SXERR_RESET = -27;

const int SXERR_DONE = -28;

const int SXERR_SHORT = -29;

const int SXERR_PATH = -30;

const int SXERR_TIMEOUT = -31;

const int SXERR_BIG = -32;

const int SXERR_RETRY = -33;

const int SXERR_IGNORE = -63;

const int UNQLITE_OK = 0;

const int UNQLITE_NOMEM = -1;

const int UNQLITE_ABORT = -10;

const int UNQLITE_IOERR = -2;

const int UNQLITE_CORRUPT = -24;

const int UNQLITE_LOCKED = -4;

const int UNQLITE_BUSY = -14;

const int UNQLITE_DONE = -28;

const int UNQLITE_PERM = -19;

const int UNQLITE_NOTIMPLEMENTED = -17;

const int UNQLITE_NOTFOUND = -6;

const int UNQLITE_NOOP = -20;

const int UNQLITE_INVALID = -9;

const int UNQLITE_EOF = -18;

const int UNQLITE_UNKNOWN = -13;

const int UNQLITE_LIMIT = -7;

const int UNQLITE_EXISTS = -11;

const int UNQLITE_EMPTY = -3;

const int UNQLITE_COMPILE_ERR = -70;

const int UNQLITE_VM_ERR = -71;

const int UNQLITE_FULL = -73;

const int UNQLITE_CANTOPEN = -74;

const int UNQLITE_READ_ONLY = -75;

const int UNQLITE_LOCKERR = -76;

const int UNQLITE_CONFIG_JX9_ERR_LOG = 1;

const int UNQLITE_CONFIG_MAX_PAGE_CACHE = 2;

const int UNQLITE_CONFIG_ERR_LOG = 3;

const int UNQLITE_CONFIG_KV_ENGINE = 4;

const int UNQLITE_CONFIG_DISABLE_AUTO_COMMIT = 5;

const int UNQLITE_CONFIG_GET_KV_NAME = 6;

const int UNQLITE_VM_CONFIG_OUTPUT = 1;

const int UNQLITE_VM_CONFIG_IMPORT_PATH = 2;

const int UNQLITE_VM_CONFIG_ERR_REPORT = 3;

const int UNQLITE_VM_CONFIG_RECURSION_DEPTH = 4;

const int UNQLITE_VM_OUTPUT_LENGTH = 5;

const int UNQLITE_VM_CONFIG_CREATE_VAR = 6;

const int UNQLITE_VM_CONFIG_HTTP_REQUEST = 7;

const int UNQLITE_VM_CONFIG_SERVER_ATTR = 8;

const int UNQLITE_VM_CONFIG_ENV_ATTR = 9;

const int UNQLITE_VM_CONFIG_EXEC_VALUE = 10;

const int UNQLITE_VM_CONFIG_IO_STREAM = 11;

const int UNQLITE_VM_CONFIG_ARGV_ENTRY = 12;

const int UNQLITE_VM_CONFIG_EXTRACT_OUTPUT = 13;

const int UNQLITE_KV_CONFIG_HASH_FUNC = 1;

const int UNQLITE_KV_CONFIG_CMP_FUNC = 2;

const int UNQLITE_LIB_CONFIG_USER_MALLOC = 1;

const int UNQLITE_LIB_CONFIG_MEM_ERR_CALLBACK = 2;

const int UNQLITE_LIB_CONFIG_USER_MUTEX = 3;

const int UNQLITE_LIB_CONFIG_THREAD_LEVEL_SINGLE = 4;

const int UNQLITE_LIB_CONFIG_THREAD_LEVEL_MULTI = 5;

const int UNQLITE_LIB_CONFIG_VFS = 6;

const int UNQLITE_LIB_CONFIG_STORAGE_ENGINE = 7;

const int UNQLITE_LIB_CONFIG_PAGE_SIZE = 8;

const int UNQLITE_OPEN_READONLY = 1;

const int UNQLITE_OPEN_READWRITE = 2;

const int UNQLITE_OPEN_CREATE = 4;

const int UNQLITE_OPEN_EXCLUSIVE = 8;

const int UNQLITE_OPEN_TEMP_DB = 16;

const int UNQLITE_OPEN_NOMUTEX = 32;

const int UNQLITE_OPEN_OMIT_JOURNALING = 64;

const int UNQLITE_OPEN_IN_MEMORY = 128;

const int UNQLITE_OPEN_MMAP = 256;

const int UNQLITE_SYNC_NORMAL = 2;

const int UNQLITE_SYNC_FULL = 3;

const int UNQLITE_SYNC_DATAONLY = 16;

const int UNQLITE_LOCK_NONE = 0;

const int UNQLITE_LOCK_SHARED = 1;

const int UNQLITE_LOCK_RESERVED = 2;

const int UNQLITE_LOCK_PENDING = 3;

const int UNQLITE_LOCK_EXCLUSIVE = 4;

const int UNQLITE_ACCESS_EXISTS = 0;

const int UNQLITE_ACCESS_READWRITE = 1;

const int UNQLITE_ACCESS_READ = 2;

const int UNQLITE_CURSOR_MATCH_EXACT = 1;

const int UNQLITE_CURSOR_MATCH_LE = 2;

const int UNQLITE_CURSOR_MATCH_GE = 3;

const String UNQLITE_JOURNAL_FILE_SUFFIX = '_unqlite_journal';

const int UNQLITE_CTX_ERR = 1;

const int UNQLITE_CTX_WARNING = 2;

const int UNQLITE_CTX_NOTICE = 3;
